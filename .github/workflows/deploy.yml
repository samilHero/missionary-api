# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CD with Gradle

on:
  push:
    branches: [ "dev" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment: dev
    permissions:
      contents: read

    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      IS_DEV: true

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Set application.yml environment variables
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          server.port: ${{ vars.SERVER_PORT }}
          jwt.header: ${{ secrets.JWT_HEADER }}
          jwt.secret: ${{ secrets.JWT_SECRET }}
          aes.encrypt.key: ${{ secrets.ENCRYPT_KEY }}
          spring.datasource.url: ${{ secrets.RDS_URL }}
          spring.datasource.username: ${{ secrets.RDS_USERNAME }}
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}
          spring.rabbitmq.host: ${{ secrets.MQ_HOST }}
          spring.rabbitmq.port: ${{ secrets.MQ_PORT }}
          spring.rabbitmq.username: ${{ secrets.MQ_USERNAME }}
          spring.rabbitmq.password: ${{ secrets.MQ_PASSWORD }}
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.data.redis.port: ${{ secrets.REDIS_PORT }}

      - name: Create Vpn Config File From Secrets
        run: |
          echo "${{ secrets.VPN_CONFIG }}" > .github/workflows/client.ovpn

      - name: Install OpenVPN
        run: |
          sudo apt update
          sudo apt install -y openvpn openvpn-systemd-resolved

      - name: Connect to VPN
        uses: "kota65535/github-openvpn-connect-action@v2"
        with:
          config_file: .github/workflows/client.ovpn
          client_key: ${{ secrets.OVPN_CLIENT_KEY }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_EB_APP_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"        

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD_HH-mm-ss
          utcOffset: "+09:00"

      - name: Set Dockerrun.aws.json environment variables
        uses: microsoft/variable-substitution@v1
        with:
          files: ./Dockerrun.aws.json
        env:
          Image.Name: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_EB_APP_NAME }}:latest

      - name: Generate deployment package
        run: |
          mkdir -p deploy
          cp Dockerrun.aws.json deploy/Dockerrun.aws.json # Elastic Beanstalk에서 Docker 실행 시 체크하는 설정 파일
          cd deploy && zip -r deploy.zip .

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.AWS_EB_APP_NAME }}
          environment_name: ${{ secrets.AWS_EB_ENV_NAME }}
          version_label: ${{ secrets.AWS_EB_APP_NAME }}-${{steps.current-time.outputs.formattedTime}}
          region: ${{ secrets.AWS_REGION }}
          deployment_package: deploy/deploy.zip
          wait_for_environment_recovery: 200