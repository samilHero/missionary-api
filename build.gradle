plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.epages.restdocs-api-spec' version '0.19.2'
    id 'org.hidetake.swagger.generator' version '2.19.2'
}

group = 'com.samill'
version = '0.0.1-SNAPSHOT'

def env = System.getenv()

// 환경 변수 "DB_USERNAME"의 값을 가져옵니다.

def SERVER_PORT = env['SERVER_PORT'] ?: "8080"
def SERVER_HOST = env['SERVER_HOST'] ?: "http://localhost:${SERVER_PORT}"
def IS_DEV = (env['BUILD_ENV'] ?: "dev") == "dev"

println "SERVER_HOST: ${SERVER_HOST}"
println "IS_DEV: ${IS_DEV}"

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springModulithVersion', "1.1.4")
}

test {
    outputs.dir snippetsDir
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    implementation 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'org.springframework.modulith:spring-modulith-starter-jpa'
    implementation 'org.springframework.modulith:spring-modulith-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    annotationProcessor(
            // spring boot properties annotation processor
            "org.springframework.boot:spring-boot-configuration-processor",
            // lombok
            "org.projectlombok:lombok:1.18.30",
            "javax.annotation:javax.annotation-api:1.3.2"
    )

    testAnnotationProcessor(
            // spring boot properties annotation processor
            "org.springframework.boot:spring-boot-configuration-processor",
            // lombok
            "org.projectlombok:lombok:1.18.30",
            "javax.annotation:javax.annotation-api:1.3.2"
    )

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

openapi3 {
    println SERVER_HOST
    server = SERVER_HOST
    title = 'Post Service API'
    description = 'Post Service API description'
    version = '1.0.0'
    format = 'json'
}

tasks.register('copySwaggerDocs', Copy) {
    dependsOn 'openapi3'
    delete 'src/main/resources/static/docs/openapi3.json'
    from "${openapi3.outputDirectory}"
    into './src/main/resources/static/docs'
}

bootJar {
    if (IS_DEV) {
        dependsOn 'copySwaggerDocs'
        from("${openapi3.outputDirectory}") {
            into "BOOT-INF/classes/static/docs"
        }
    }
}

jar {
    enabled = false
}